{"version":3,"sources":["components/Result.js","components/Form.js","components/Header.js","components/App.js","serviceWorker.js","index.js"],"names":["Result","props","state","temp","feelsTemp","humidity","clouds","wind","icon","pressure","country","err","city","sunrise","sunset","chosenCity","timezone","cityHours","cityMinutes","citySeconds","sunriseTime","Date","toLocaleTimeString","sunsetTime","length","className","src","alt","Form","action","onSubmit","searchData","type","placeholder","value","onChange","setCity","Header","Hours","Minutes","Seconds","API_URL","API_KEY","App","setValue","e","target","setState","browseCity","API","preventDefault","fetch","then","response","ok","Error","json","data","main","toFixed","feels_like","all","sys","name","speed","weather","catch","this","timerID","setInterval","clock","clearInterval","Time","newTime","getTime","newTime2","parseInt","timeZone","cityTime","getHours","getMinutes","getSeconds","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.fcb1158e.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\r\n\r\nconst Result = (props) => {\r\n  const {\r\n    temp,\r\n    feelsTemp,\r\n    humidity,\r\n    clouds,\r\n    wind,\r\n    icon,\r\n    pressure,\r\n    country,\r\n    err,\r\n    city,\r\n    sunrise,\r\n    sunset,\r\n    chosenCity,\r\n    timezone,\r\n    cityHours,\r\n    cityMinutes,\r\n    citySeconds,\r\n  } = props.state;\r\n\r\n  let sunriseTime = new Date(\r\n    sunrise * 1000 + timezone * 1000 - 7200 * 1000\r\n  ).toLocaleTimeString();\r\n  let sunsetTime = new Date(\r\n    sunset * 1000 + timezone * 1000 - 7200 * 1000\r\n  ).toLocaleTimeString();\r\n\r\n  return (\r\n    <Fragment>\r\n      {err === false && city.length > 0 ? (\r\n        <section className=\"cityParameters\">\r\n          <div className=\"cityParameters__parameter\">\r\n            <img\r\n              src={`https://www.countryflags.io/${country}/shiny/64.png`}\r\n              alt=\"flag\"\r\n            />\r\n            <h2 className=\"parameter__cityName\">{city}</h2>{\" \"}\r\n            <img\r\n              src={`http://openweathermap.org/img/wn/${icon}.png`}\r\n              alt=\"weather__icon\"\r\n            />\r\n          </div>\r\n          <div className=\"cityParameters__parameter\">\r\n            {cityHours === \"\" ? null : (\r\n              <>\r\n                <p>Czas</p>\r\n                <p>\r\n                  <strong>\r\n                    {cityHours}: {cityMinutes}: {citySeconds}\r\n                  </strong>\r\n                  <i className=\"far fa-clock\"></i>\r\n                </p>\r\n              </>\r\n            )}\r\n          </div>\r\n          <div className=\"cityParameters__parameter\">\r\n            {temp === \"\" ? null : (\r\n              <>\r\n                <p> Temp.</p>\r\n                <p>\r\n                  <strong>{temp}&#176;C</strong>\r\n                  <i className=\"fas fa-thermometer-half\"></i>\r\n                </p>\r\n              </>\r\n            )}\r\n          </div>\r\n          <div className=\"cityParameters__parameter\">\r\n            {feelsTemp === \"\" ? null : (\r\n              <>\r\n                <p>Temp.odczuwalna</p>\r\n                <p>\r\n                  <strong>{feelsTemp}&#176;C</strong>\r\n                  <i className=\"fas fa-thermometer-half\"></i>\r\n                </p>\r\n              </>\r\n            )}\r\n          </div>\r\n          <div className=\"cityParameters__parameter\">\r\n            {wind === \"\" ? null : (\r\n              <>\r\n                <p>Pręd.wiatru</p>\r\n                <p>\r\n                  <strong>{wind} m/s</strong>\r\n                  <i className=\"fas fa-wind\"></i>\r\n                </p>\r\n              </>\r\n            )}\r\n          </div>\r\n          <div className=\"cityParameters__parameter\">\r\n            {humidity === \"\" ? null : (\r\n              <>\r\n                <p>Wilgotność</p>\r\n                <p>\r\n                  <strong>{humidity} %</strong>\r\n                  <i className=\"fas fa-tint\"></i>\r\n                </p>\r\n              </>\r\n            )}\r\n          </div>\r\n          <div className=\"cityParameters__parameter\">\r\n            {pressure === \"\" ? null : (\r\n              <>\r\n                <p>Ciśnienie</p>\r\n                <p>\r\n                  <strong>{pressure} hPa</strong>\r\n                </p>\r\n              </>\r\n            )}\r\n          </div>\r\n          <div className=\"cityParameters__parameter\">\r\n            {clouds === \"\" ? null : (\r\n              <>\r\n                <p>Zachmurzenie</p>\r\n                <p>\r\n                  <strong>{clouds} %</strong>\r\n                  <i className=\"fas fa-cloud\"></i>\r\n                </p>\r\n              </>\r\n            )}\r\n          </div>\r\n          <div className=\"cityParameters__parameter\">\r\n            {sunrise === \"\" ? null : (\r\n              <>\r\n                <p>Wschód słońca</p>\r\n                <p>\r\n                  <strong>{sunriseTime}</strong>\r\n                  <i className=\"fas fa-sun\"></i>\r\n                </p>\r\n              </>\r\n            )}\r\n          </div>\r\n          <div className=\"cityParameters__parameter\">\r\n            {sunset === \"\" ? null : (\r\n              <>\r\n                <p>Zachód słońca</p>\r\n                <p>\r\n                  <strong>{sunsetTime}</strong>\r\n                  <i className=\"fas fa-moon\"></i>\r\n                </p>\r\n              </>\r\n            )}\r\n          </div>\r\n        </section>\r\n      ) : (\r\n        <p className={chosenCity !== \"\" && err === true ? \"error\" : null}>\r\n          {chosenCity !== \"\" && err === true\r\n            ? `Nie ma danych dla wyrażenia \"${chosenCity}\"`\r\n            : null}\r\n        </p>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","import React, { Fragment } from \"react\";\r\n\r\nconst Form = (props) => {\r\n  return (\r\n    <Fragment>\r\n      <form action=\"\" className=\"form\" onSubmit={props.searchData}>\r\n        <input\r\n          type=\"text\"\r\n          className=\"form__input\"\r\n          placeholder=\"Wpisz miasto...\"\r\n          value={props.state.chosenCity}\r\n          onChange={props.setCity}\r\n        />\r\n        <button className=\"form__button\">\r\n          Szukaj<span className=\"button__animated\"></span>\r\n        </button>\r\n      </form>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React, { Fragment } from \"react\";\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <Fragment>\r\n      <h1 className=\"app__heading\">\r\n        WeatherApp<i className=\"fas fa-sun\"></i>\r\n        <img\r\n          src=\"http://openweathermap.org/img/wn/03d.png\"\r\n          className=\"heading__cloud\"\r\n          alt=\"\"\r\n        />\r\n        <img\r\n          src=\"http://openweathermap.org/img/wn/03d.png\"\r\n          className=\"heading__cloud\"\r\n          alt=\"\"\r\n        />\r\n        <img\r\n          src=\"http://openweathermap.org/img/wn/03d.png\"\r\n          className=\"heading__cloud\"\r\n          alt=\"\"\r\n        />\r\n        <div className=\"heading__clock\">\r\n          <p className=\"clock__time\">\r\n            {props.state.Hours}: {props.state.Minutes}: {props.state.Seconds}\r\n          </p>\r\n        </div>\r\n      </h1>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { Fragment, Component } from \"react\";\nimport \"./App.css\";\nimport Result from \"./Result\";\nimport Form from \"./Form\";\nimport Header from \"./Header\";\n\nconst API_URL = \"http://api.openweathermap.org/data/2.5/weather\";\nconst API_KEY = \"55d46950bde17f9e929a16565cd3e30e\";\nconst UNITS = \"metric\";\n\nclass App extends Component {\n  state = {\n    chosenCity: \"\",\n    temp: \"\",\n    feelsTemp: \"\",\n    humidity: \"\",\n    pressure: \"\",\n    clouds: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n    country: \"\",\n    city: \"\",\n    wind: \"\",\n    icon: \"\",\n    err: \"\",\n    timezone: \"\",\n    Hours: \"\",\n    Minutes: \"\",\n    Seconds: \"\",\n    cityHours: \"\",\n    cityMinutes: \"\",\n    citySeconds: \"\",\n  };\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.clock(), 1000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  clock() {\n    const Time = new Date();\n\n    const newTime = (Time.getTime() / 1000).toFixed(0);\n    const newTime2 = parseInt(newTime);\n    const timeZone = this.state.timezone;\n    const cityTime = new Date(newTime2 * 1000 + timeZone * 1000 - 7200 * 1000);\n\n    const cityHours =\n      cityTime.getHours() < 10\n        ? \"0\" + cityTime.getHours()\n        : cityTime.getHours();\n    const cityMinutes =\n      cityTime.getMinutes() < 10\n        ? \"0\" + cityTime.getMinutes()\n        : cityTime.getMinutes();\n    const citySeconds =\n      cityTime.getSeconds() < 10\n        ? \"0\" + cityTime.getSeconds()\n        : cityTime.getSeconds();\n\n    const Hours =\n      Time.getHours() < 10 ? \"0\" + Time.getHours() : Time.getHours();\n    const Minutes =\n      Time.getMinutes() < 10 ? \"0\" + Time.getMinutes() : Time.getMinutes();\n    const Seconds =\n      Time.getSeconds() < 10 ? \"0\" + Time.getSeconds() : Time.getSeconds();\n\n    this.setState({\n      Hours,\n      Minutes,\n      Seconds,\n      cityHours,\n      cityMinutes,\n      citySeconds,\n    });\n  }\n\n  setValue = (e) => {\n    const value = e.target.value;\n    this.setState({\n      chosenCity: value,\n    });\n  };\n  browseCity = (e) => {\n    const API = `${API_URL}?q=${this.state.chosenCity}&appid=${API_KEY}&units=${UNITS}`;\n    e.preventDefault();\n    const { chosenCity } = this.state;\n    if (chosenCity === \"\") {\n      return;\n    } else {\n      fetch(API)\n        .then((response) => {\n          if (response.ok) {\n            return response;\n          }\n          throw Error(\"Nie udało się\");\n        })\n        .then((response) => response.json())\n        .then((data) => {\n          this.setState({\n            chosenCity: \"\",\n            temp: data.main.temp.toFixed(0),\n            feelsTemp: data.main.feels_like.toFixed(0),\n            humidity: data.main.humidity,\n            pressure: data.main.pressure,\n            clouds: data.clouds.all,\n            country: data.sys.country,\n            sunrise: data.sys.sunrise,\n            sunset: data.sys.sunset,\n            city: data.name,\n            timezone: data.timezone,\n            wind: data.wind.speed.toFixed(1),\n            icon: data.weather[0].icon,\n            err: false,\n          });\n        })\n        .catch((err) => {\n          this.setState({\n            err: true,\n          });\n        });\n    }\n  };\n  render() {\n    return (\n      <Fragment>\n        <div className=\"wrapper\">\n          <Header state={this.state} />\n          <Form\n            state={this.state}\n            setCity={this.setValue}\n            searchData={this.browseCity}\n          />\n          <Result state={this.state} />\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}